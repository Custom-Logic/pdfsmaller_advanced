// server.js
const express = require('express');
const path = require('path');
const compression = require('compression');
const helmet = require('helmet');
const cors = require('cors');
const { createProxyMiddleware } = require('http-proxy-middleware');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net"],
      styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com", "https://cdn.jsdelivr.net"],
      fontSrc: ["'self'", "https://fonts.gstatic.com", "https://cdn.jsdelivr.net"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'", "https://api.pdfsmaller.site"],
    }
  }
}));

app.use(compression());
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? 'https://pdfsmaller.site' 
    : ['http://localhost:3000', 'http://localhost:8080'],
  credentials: true
}));

// Body parsing middleware
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Serve static files
app.use(express.static(path.join(__dirname, 'dist'), {
  maxAge: '1y',
  etag: false,
  setHeaders: (res, path) => {
    if (path.endsWith('.html')) {
      res.setHeader('Cache-Control', 'no-cache');
    }
  }
}));

// API Proxy Middleware - Forward all API requests to the actual API service
app.use('/api', createProxyMiddleware({
  target: 'https://api.pdfsmaller.site',
  changeOrigin: true,
  pathRewrite: {
    '^/api': '/api', // Keep the /api prefix
  },
  on: {
    proxyReq: (proxyReq, req, res) => {
      console.log(`Proxying request: ${req.method} ${req.url} -> https://api.pdfsmaller.site${req.url}`);
      
      // Forward headers if needed
      if (req.headers.authorization) {
        proxyReq.setHeader('Authorization', req.headers.authorization);
      }
      
      // Handle file uploads - multipart/form-data
      if (req.headers['content-type'] && req.headers['content-type'].includes('multipart/form-data')) {
        // Remove content-length header for multipart requests
        proxyReq.removeHeader('Content-Length');
      }
    },
    proxyRes: (proxyRes, req, res) => {
      console.log(`Received response: ${proxyRes.statusCode} from https://api.pdfsmaller.site${req.url}`);
      
      // Add CORS headers to response
      proxyRes.headers['Access-Control-Allow-Origin'] = req.headers.origin || '*';
      proxyRes.headers['Access-Control-Allow-Credentials'] = 'true';
    },
    error: (err, req, res) => {
      console.error('Proxy error:', err);
      res.status(502).json({ 
        error: 'Bad Gateway',
        message: 'Unable to connect to API service'
      });
    }
  },
  // Increase timeout for file uploads
  proxyTimeout: 300000, // 5 minutes
  timeout: 300000,
}));

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    apiService: 'https://api.pdfsmaller.site'
  });
});

// API service status check
app.get('/api/health', createProxyMiddleware({
  target: 'https://api.pdfsmaller.site',
  changeOrigin: true,
  pathRewrite: {
    '^/api/health': '/health', // Map to API service's health endpoint
  },
}));

// Handle SPA routing - serve index.html for all other routes
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});

// Error handling middleware
app.use((error, req, res, next) => {
  console.error('Server Error:', error);
  res.status(500).json({ 
    error: 'Internal Server Error',
    message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'
  });
});

app.listen(PORT, () => {
  console.log(`Frontend server running on port ${PORT}`);
  console.log(`API requests will be proxied to: https://api.pdfsmaller.site`);
  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
});

module.exports = app;